generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String
  inStock      Int
  price        Float          @default(0)
  sizes        Size[]         @default([])
  slug         String         @unique
  tags         String[]       @default([])
  gender       Gender
  categoryId   String
  OrderItem    OrderItem[]
  category     Category       @relation(fields: [categoryId], references: [id])
  ProductImage ProductImage[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// Model for user authjs
model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  role          Role         @default(user)
  image         String?
  accounts      Account[]
  Order         Order[]
  userAddress   UserAddress?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// fin model for user auth.js

model Country {
  id           String         @id @unique
  name         String
  OrderAddress OrderAddress[]
  UserAddress  UserAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  countryId  String
  userId     String  @unique
  city       String
  country    Country @relation(fields: [countryId], references: [id])
  user       User    @relation(fields: [userId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean       @default(false)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  transactionId String?
  user          User          @relation(fields: [userId], references: [id])
  OrderAddress  OrderAddress?
  OrderItem     OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  size      Size
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  countryId  String
  orderId    String  @unique
  country    Country @relation(fields: [countryId], references: [id])
  Order      Order   @relation(fields: [orderId], references: [id])
}

// model FavoriteProduct {
//   id         String  @id @default(uuid())
//   userId     String
//   productId  String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   user       User    @relation(fields: [userId], references: [id])
//   product    Product @relation(fields: [productId], references: [id])

//   @@unique([userId, productId])
// }

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}
